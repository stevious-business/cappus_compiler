--- START META ---

NAME multi_funcdef
DESCRIPTION A unit test

--- END ---
--- START TEST_CODE ---

// Define multiple functions
int main() {
}

str *strncat(str *a, str *b, int len) {
}

void test(bool a) {
}

--- END ---
--- START EXPECTED_AST ---

{"_type": "<class 'compiler.parser.ast.AST'>", "_object": {"name": "root", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "int", "src": {"_type": "<class 'compiler.lexer.source.Source'>", "_object": {"data": "// Define multiple functions\nint main() {\n}\n\nstr *strncat(str *a, str *b, int len) {\n}\n\nvoid test(bool a) {\n}", "file": {"_type": "<class '_io.StringIO'>", "_object": {}}, "filename": "(string)", "length": "109", "ptr": "109", "chars": ["/", "/", " ", "D", "e", "f", "i", "n", "e", " ", "m", "u", "l", "t", "i", "p", "l", "e", " ", "f", "u", "n", "c", "t", "i", "o", "n", "s", "\n", "i", "n", "t", " ", "m", "a", "i", "n", "(", ")", " ", "{", "\n", "}", "\n", "\n", "s", "t", "r", " ", "*", "s", "t", "r", "n", "c", "a", "t", "(", "s", "t", "r", " ", "*", "a", ",", " ", "s", "t", "r", " ", "*", "b", ",", " ", "i", "n", "t", " ", "l", "e", "n", ")", " ", "{", "\n", "}", "\n", "\n", "v", "o", "i", "d", " ", "t", "e", "s", "t", "(", "b", "o", "o", "l", " ", "a", ")", " ", "{", "\n", "}"], "line": "9", "col": "1"}}, "ptr": "32", "stamp": "<(string)> 2:4"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: main", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "main", "src": "<ancestor>", "ptr": "37", "stamp": "<(string)> 2:9"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "(", "src": "<ancestor>", "ptr": "38", "stamp": "<(string)> 2:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ")", "src": "<ancestor>", "ptr": "39", "stamp": "<(string)> 2:11"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "41", "stamp": "<(string)> 2:13"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "43", "stamp": "<(string)> 3:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: str", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "str", "src": "<ancestor>", "ptr": "48", "stamp": "<(string)> 5:3"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [], "name": "*"}}, "children": [], "name": "OPERATOR: *", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "*", "src": "<ancestor>", "ptr": "50", "stamp": "<(string)> 5:5"}}}}], "name": "<type-specifier>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: strncat", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "strncat", "src": "<ancestor>", "ptr": "57", "stamp": "<(string)> 5:12"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "(", "src": "<ancestor>", "ptr": "58", "stamp": "<(string)> 5:13"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: str", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "str", "src": "<ancestor>", "ptr": "61", "stamp": "<(string)> 5:16"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [], "name": "*"}}, "children": [], "name": "OPERATOR: *", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "*", "src": "<ancestor>", "ptr": "63", "stamp": "<(string)> 5:18"}}}}], "name": "<type-specifier>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: a", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "a", "src": "<ancestor>", "ptr": "64", "stamp": "<(string)> 5:19"}}}}], "name": "<arg>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "COMMA: ,", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ",", "src": "<ancestor>", "ptr": "65", "stamp": "<(string)> 5:20"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: str", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "str", "src": "<ancestor>", "ptr": "69", "stamp": "<(string)> 5:24"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [], "name": "*"}}, "children": [], "name": "OPERATOR: *", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "*", "src": "<ancestor>", "ptr": "71", "stamp": "<(string)> 5:26"}}}}], "name": "<type-specifier>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: b", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "b", "src": "<ancestor>", "ptr": "72", "stamp": "<(string)> 5:27"}}}}], "name": "<arg>"}}], "name": "<extra-arg>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "COMMA: ,", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ",", "src": "<ancestor>", "ptr": "73", "stamp": "<(string)> 5:28"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "int", "src": "<ancestor>", "ptr": "77", "stamp": "<(string)> 5:32"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: len", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "len", "src": "<ancestor>", "ptr": "81", "stamp": "<(string)> 5:36"}}}}], "name": "<arg>"}}], "name": "<extra-arg>"}}], "name": "<arg-list>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ")", "src": "<ancestor>", "ptr": "82", "stamp": "<(string)> 5:37"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "84", "stamp": "<(string)> 5:39"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "86", "stamp": "<(string)> 6:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: void", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "void", "src": "<ancestor>", "ptr": "92", "stamp": "<(string)> 8:4"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: test", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "test", "src": "<ancestor>", "ptr": "97", "stamp": "<(string)> 8:9"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "(", "src": "<ancestor>", "ptr": "98", "stamp": "<(string)> 8:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<arg-list>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: bool", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "bool", "src": "<ancestor>", "ptr": "102", "stamp": "<(string)> 8:14"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: a", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "a", "src": "<ancestor>", "ptr": "104", "stamp": "<(string)> 8:16"}}}}], "name": "<arg>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ")", "src": "<ancestor>", "ptr": "105", "stamp": "<(string)> 8:17"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "107", "stamp": "<(string)> 8:19"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "109", "stamp": "<(string)> 9:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "EOF: EOF", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "EOF", "src": "<ancestor>", "ptr": "109", "stamp": "<(string)> 9:1"}}}}], "name": "<translation-unit>"}}]}}

--- END ---
--- START EXPECTED_INTERMEDIATE ---

{"_type": "<class 'compiler.codegen.asm.Assembly'>", "_object": {"lines": ["main:", "    RET", "strncat:", "    RET", "test:", "    RET"], "indenture": "0", "marked": "False", "marker": "0"}}

--- END ---
--- START EXPECTED_SYM_TAB ---

{"_type": "<class 'compiler.codegen.symbol_table.SymbolTable'>", "_object": {"entries": [{"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": {"_type": "<enum 'SymbolTypes'>", "_object": {}}, "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "global", "scope": "None", "datatype": "void", "var_t": "-1"}}, {"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": "<ancestor>", "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "main", "scope": "None", "datatype": "int", "var_t": "-1"}}, {"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": "<ancestor>", "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "strncat", "scope": "None", "datatype": "str *", "var_t": "-1"}}, {"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": "<ancestor>", "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "test", "scope": "None", "datatype": "void", "var_t": "-1"}}]}}

--- END ---
