--- START META ---

NAME expressions/addition
DESCRIPTION A unit test

--- END ---
--- START TEST_CODE ---

int main() {
    1 + 2;
}

int subtraction_order() {
    1 - 2 + 1;
}

int parens() {
    1 - (2 + 1);
}

--- END ---
--- START EXPECTED_AST ---

{"_type": "<class 'compiler.parser.ast.AST'>", "_object": {"name": "root", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "int", "src": {"_type": "<class 'compiler.lexer.source.Source'>", "_object": {"data": "int main() {\n    1 + 2;\n}\n\nint subtraction_order() {\n    1 - 2 + 1;\n}\n\nint parens() {\n    1 - (2 + 1);\n}", "file": {"_type": "<class '_io.StringIO'>", "_object": {}}, "filename": "(string)", "length": "104", "ptr": "104", "chars": ["i", "n", "t", " ", "m", "a", "i", "n", "(", ")", " ", "{", "\n", " ", " ", " ", " ", "1", " ", "+", " ", "2", ";", "\n", "}", "\n", "\n", "i", "n", "t", " ", "s", "u", "b", "t", "r", "a", "c", "t", "i", "o", "n", "_", "o", "r", "d", "e", "r", "(", ")", " ", "{", "\n", " ", " ", " ", " ", "1", " ", "-", " ", "2", " ", "+", " ", "1", ";", "\n", "}", "\n", "\n", "i", "n", "t", " ", "p", "a", "r", "e", "n", "s", "(", ")", " ", "{", "\n", " ", " ", " ", " ", "1", " ", "-", " ", "(", "2", " ", "+", " ", "1", ")", ";", "\n", "}"], "line": "11", "col": "1"}}, "ptr": "3", "stamp": "<(string)> 1:3"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: main", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "main", "src": "<ancestor>", "ptr": "8", "stamp": "<(string)> 1:8"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "(", "src": "<ancestor>", "ptr": "9", "stamp": "<(string)> 1:9"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ")", "src": "<ancestor>", "ptr": "10", "stamp": "<(string)> 1:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "12", "stamp": "<(string)> 1:12"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<expression>"}}, "children": ["<ancestor>"], "name": "<assignment-expression>"}}, "children": ["<ancestor>"], "name": "<constant-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 1", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "1", "src": "<ancestor>", "ptr": "18", "stamp": "<(string)> 2:5"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPERATOR: +", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "+", "src": "<ancestor>", "ptr": "20", "stamp": "<(string)> 2:7"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 2", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "2", "src": "<ancestor>", "ptr": "22", "stamp": "<(string)> 2:9"}}}}], "name": "<additive-expression>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "SEMICOLON: ;", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ";", "src": "<ancestor>", "ptr": "23", "stamp": "<(string)> 2:10"}}}}], "name": "<statement>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "25", "stamp": "<(string)> 3:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "int", "src": "<ancestor>", "ptr": "30", "stamp": "<(string)> 5:3"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: subtraction_order", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "subtraction_order", "src": "<ancestor>", "ptr": "48", "stamp": "<(string)> 5:21"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "(", "src": "<ancestor>", "ptr": "49", "stamp": "<(string)> 5:22"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ")", "src": "<ancestor>", "ptr": "50", "stamp": "<(string)> 5:23"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "52", "stamp": "<(string)> 5:25"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<expression>"}}, "children": ["<ancestor>"], "name": "<assignment-expression>"}}, "children": ["<ancestor>"], "name": "<constant-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 1", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "1", "src": "<ancestor>", "ptr": "58", "stamp": "<(string)> 6:5"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPERATOR: -", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "-", "src": "<ancestor>", "ptr": "60", "stamp": "<(string)> 6:7"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 2", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "2", "src": "<ancestor>", "ptr": "62", "stamp": "<(string)> 6:9"}}}}], "name": "<additive-expression>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPERATOR: +", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "+", "src": "<ancestor>", "ptr": "64", "stamp": "<(string)> 6:11"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 1", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "1", "src": "<ancestor>", "ptr": "66", "stamp": "<(string)> 6:13"}}}}], "name": "<additive-expression>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "SEMICOLON: ;", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ";", "src": "<ancestor>", "ptr": "67", "stamp": "<(string)> 6:14"}}}}], "name": "<statement>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "69", "stamp": "<(string)> 7:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "int", "src": "<ancestor>", "ptr": "74", "stamp": "<(string)> 9:3"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: parens", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "parens", "src": "<ancestor>", "ptr": "81", "stamp": "<(string)> 9:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "(", "src": "<ancestor>", "ptr": "82", "stamp": "<(string)> 9:11"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ")", "src": "<ancestor>", "ptr": "83", "stamp": "<(string)> 9:12"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "85", "stamp": "<(string)> 9:14"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<expression>"}}, "children": ["<ancestor>"], "name": "<assignment-expression>"}}, "children": ["<ancestor>"], "name": "<constant-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 1", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "1", "src": "<ancestor>", "ptr": "91", "stamp": "<(string)> 10:5"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPERATOR: -", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "-", "src": "<ancestor>", "ptr": "93", "stamp": "<(string)> 10:7"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "(", "src": "<ancestor>", "ptr": "95", "stamp": "<(string)> 10:9"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<expression>"}}, "children": ["<ancestor>"], "name": "<assignment-expression>"}}, "children": ["<ancestor>"], "name": "<constant-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-or-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<logical-and-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<inclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<exclusive-or-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<and-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<equality-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<relational-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<shift-expression>"}}, "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<additive-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 2", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "2", "src": "<ancestor>", "ptr": "96", "stamp": "<(string)> 10:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPERATOR: +", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "+", "src": "<ancestor>", "ptr": "98", "stamp": "<(string)> 10:12"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<multiplicative-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<power-expression>"}}, "children": ["<ancestor>"], "name": "<unary-expression>"}}, "children": ["<ancestor>"], "name": "<primary-expression>"}}, "children": ["<ancestor>"], "name": "<constant>"}}, "children": [], "name": "INTEGER: 1", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "1", "src": "<ancestor>", "ptr": "100", "stamp": "<(string)> 10:14"}}}}], "name": "<additive-expression>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ")", "src": "<ancestor>", "ptr": "101", "stamp": "<(string)> 10:15"}}}}], "name": "<primary-expression>"}}], "name": "<additive-expression>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "SEMICOLON: ;", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": ";", "src": "<ancestor>", "ptr": "102", "stamp": "<(string)> 10:16"}}}}], "name": "<statement>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "104", "stamp": "<(string)> 11:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "EOF: EOF", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "EOF", "src": "<ancestor>", "ptr": "104", "stamp": "<(string)> 11:1"}}}}], "name": "<translation-unit>"}}]}}

--- END ---
--- START EXPECTED_INTERMEDIATE ---

{"_type": "<class 'compiler.codegen.asm.Assembly'>", "_object": {"lines": ["main:", "    LDI T0, 3", "    RET", "subtraction_order:", "    LDI T0, 0", "    RET", "parens:", "    LDI T0, -2", "    RET"], "indenture": "0", "marked": "False", "marker": "0"}}

--- END ---
