--- START META ---

NAME complicated_funcdef
DESCRIPTION A unit test

--- END ---
--- START TEST_CODE ---

/*Slightly more complicated function definition*/
int *main(str *argv, int argc) {
}

--- END ---
--- START EXPECTED_AST ---

{"_type": "<class 'compiler.parser.ast.AST'>", "_object": {"name": "root", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "int", "src": {"_type": "<class 'compiler.lexer.source.Source'>", "_object": {"data": "/*Slightly more complicated function definition*/\nint *main(str *argv, int argc) {\n}", "file": {"_type": "<class '_io.StringIO'>", "_object": {}}, "filename": "(string)", "length": "84", "ptr": "84", "chars": ["/", "*", "S", "l", "i", "g", "h", "t", "l", "y", " ", "m", "o", "r", "e", " ", "c", "o", "m", "p", "l", "i", "c", "a", "t", "e", "d", " ", "f", "u", "n", "c", "t", "i", "o", "n", " ", "d", "e", "f", "i", "n", "i", "t", "i", "o", "n", "*", "/", "\n", "i", "n", "t", " ", "*", "m", "a", "i", "n", "(", "s", "t", "r", " ", "*", "a", "r", "g", "v", ",", " ", "i", "n", "t", " ", "a", "r", "g", "c", ")", " ", "{", "\n", "}"], "line": "3", "col": "1"}}, "ptr": "53", "stamp": "<(string)> 2:4"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [], "name": "*"}}, "children": [], "name": "OPERATOR: *", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "*", "src": "<ancestor>", "ptr": "55", "stamp": "<(string)> 2:6"}}}}], "name": "<type-specifier>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: main", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "main", "src": "<ancestor>", "ptr": "59", "stamp": "<(string)> 2:10"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: (", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "(", "src": "<ancestor>", "ptr": "60", "stamp": "<(string)> 2:11"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: str", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "str", "src": "<ancestor>", "ptr": "63", "stamp": "<(string)> 2:14"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [], "name": "*"}}, "children": [], "name": "OPERATOR: *", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "*", "src": "<ancestor>", "ptr": "65", "stamp": "<(string)> 2:16"}}}}], "name": "<type-specifier>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: argv", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "argv", "src": "<ancestor>", "ptr": "69", "stamp": "<(string)> 2:20"}}}}], "name": "<arg>"}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "COMMA: ,", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ",", "src": "<ancestor>", "ptr": "70", "stamp": "<(string)> 2:21"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": ["<ancestor>"], "name": "<type-specifier>"}}, "children": ["<ancestor>"], "name": "<type-name>"}}, "children": [], "name": "KEYWORD: int", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "int", "src": "<ancestor>", "ptr": "74", "stamp": "<(string)> 2:25"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "IDENTIFIER: argc", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "argc", "src": "<ancestor>", "ptr": "79", "stamp": "<(string)> 2:30"}}}}], "name": "<arg>"}}], "name": "<extra-arg>"}}], "name": "<arg-list>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: )", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": ")", "src": "<ancestor>", "ptr": "80", "stamp": "<(string)> 2:31"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Node'>", "_object": {"parent": "<ancestor>", "children": [{"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "OPENPAR: {", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "{", "src": "<ancestor>", "ptr": "82", "stamp": "<(string)> 2:33"}}}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "CLOSEPAR: }", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": "<ancestor>", "value": "}", "src": "<ancestor>", "ptr": "84", "stamp": "<(string)> 3:1"}}}}], "name": "<compound-statement>"}}], "name": "<function-definition>"}}, {"_type": "<class 'compiler.parser.ast.AST_Terminal'>", "_object": {"parent": "<ancestor>", "children": [], "name": "EOF: EOF", "lexeme": {"_type": "<class 'compiler.lexer.tokens.Lexeme'>", "_object": {"tokenType": {"_type": "<enum 'TokenType'>", "_object": {}}, "value": "EOF", "src": "<ancestor>", "ptr": "84", "stamp": "<(string)> 3:1"}}}}], "name": "<translation-unit>"}}]}}

--- END ---
--- START EXPECTED_INTERMEDIATE ---

{"_type": "<class 'compiler.codegen.asm.Assembly'>", "_object": {"lines": ["main:", "    RET"], "indenture": "0", "marked": "False", "marker": "0"}}

--- END ---
--- START EXPECTED_SYM_TAB ---

{"_type": "<class 'compiler.codegen.symbol_table.SymbolTable'>", "_object": {"entries": [{"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": {"_type": "<enum 'SymbolTypes'>", "_object": {}}, "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "global", "scope": "None", "datatype": "void", "var_t": "-1"}}, {"_type": "<class 'compiler.codegen.symbol_table.Symbol'>", "_object": {"type_": "<ancestor>", "liveness_begin": "None", "liveness_end": "None", "token": "None", "name": "main", "scope": "None", "datatype": "int *", "var_t": "-1"}}]}}

--- END ---
