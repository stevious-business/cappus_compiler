<translation-unit> ::= {<function-definition>}* EOF

<function-definition> ::= <type-specifier> <identifier>
                        ( {<arg-list>}? )
                        <compound-statement>

<scoped-type-specifier> ::= {<scope-specifier>}? <type-specifier>

<scope-specifier> ::= local | subglobal
                  | global

<type-specifier> ::= <type-name> {*}?

<type-name> ::= int | str
            | float | bool
            | void

<arg-list> ::= <arg> {<extra-arg>}*

<extra-arg> ::= , <arg>

<arg> ::= <scoped-type-specifier> <identifier>

<compound-statement> ::= { {<statement>}* }

<statement> ::= <compound-statement>
            | <selection-statement>
            | <iteration-statement>
            | <expression> ;
            | <jmp-keyword> ;

<jmp-keyword> ::= break
                | return {<assignment-expression>}?
                | continue

<selection-statement> ::= if ( <expression> ) <compound-statement> else <statement>
                        | if ( <expression> ) <compound-statement>

<iteration-statement> ::= for ( {<expression>}? ; {<expression>}? ;
                                {<expression>}? ) <statement>
                        | while ( {<expression>}? ) <statement>

<expression> ::= <declaration-list>
               | <assignment-expression>

<assignment-expression> ::= <identifier> <init-assignment>
                          | <constant-expression>

<init-assignment> ::= <postfix>
                    | <assignment-operator> <assignment-expression>

<postfix> ::= ++
            | --

<assignment-operator> ::= += | -= | *= | /=
                      | >= | <= | != | ^=
                      | %= | &= | |=
                      | >>= | <<= | =

<declaration-list> ::= <declaration> {<further-declaration>}*

<further-declaration> ::= , {<scoped-type-specifier>}? <identifier> {<init-assignment>}?

<declaration> ::= <scoped-type-specifier> <identifier> {<init-assignment>}?

<constant-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression> || <logical-or-expression>
                          | <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression> && <logical-and-expression>
                           | <inclusive-or-expression>

<inclusive-or-expression> ::= <exclusive-or-expression> \| <inclusive-or-expression>
                            | <exclusive-or-expression>

<exclusive-or-expression> ::= <and-expression> ^ <exclusive-or-expression>
                            | <and-expression>

<and-expression> ::= <equality-expression> & <and-expression>
                   | <equality-expression>

<equality-expression> ::= <relational-expression> == <equality-expression>
                        | <relational-expression> != <equality-expression>
                        | <relational-expression>

<relational-expression> ::= <shift-expression> < <relational-expression>
                          | <shift-expression> > <relational-expression>
                          | <shift-expression> <= <relational-expression>
                          | <shift-expression> >= <relational-expression>
                          | <shift-expression>

<shift-expression> ::= <additive-expression> << <shift-expression>
                     | <additive-expression> >> <shift-expression>
                     | <additive-expression>

<additive-expression> ::= <multiplicative-expression> + <additive-expression>
                        | <multiplicative-expression> - <additive-expression>
                        | <multiplicative-expression>

<multiplicative-expression> ::= <power-expression> * <multiplicative-expression>
                              | <power-expression> / <multiplicative-expression>
                              | <power-expression> % <multiplicative-expression>
                              | <power-expression>

<power-expression> ::= <unary-expression> ** <power-expression>
                     | <unary-expression>

<unary-expression> ::= {<unary-operator>}? <primary-expression>

<unary-operator> ::= +
                   | -
                   | !
                   | ~

<primary-expression> ::= <function-call>
                       | <constant>
                       | <string>
                       | ( <expression> )
                       | <identifier>

<function-call> ::= <identifier> ( {<assignment-expression>}? {<call-arg>}* )

<call-arg> ::= , <assignment-expression>

<constant> ::= <integer-constant>
             | <floating-constant>
             | <boolean-constant>
